arrange(desc(data[[2]]))
print(top_countries)
top10_countries <- head(top_countries, 10)
top10_countries$country <- factor(top10_countries$country,
levels = unique(top10_countries$country)[order(top10_countries[[2]],
decreasing = TRUE)])
# initial plotly plot
fig <- plot_ly(
x = top10_countries$country,
y = top10_countries[[2]],
type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
texttemplate = '%{y:.2s}', textposition = 'outside'
)
# For y-axis title based on selected column
choose_title <- function() {
title_col <- colnames(top10_countries[2])
if (title_col == "co2") {
return('CO<sub>2</sub> Emission (mil tonnes/year)')
} else if (title_col == "co2_per_capita") {
return('CO<sub>2</sub> Emission per capita (tonnes/year)')
} else if (title_col == "cumulative_co2") {
return('Cumulative CO<sub>2</sub> Emission (mil tonnes/year)')
}
}
fig <- fig %>% layout(title = sprintf('<b>Top 10 Countries in Year %s </b>', year),
yaxis = list(title = choose_title(),
titlefont = list(
size = 12)))
return(fig)
}
top_ranking_plot(data=co2, column="co2", year=2019)
top_ranking_plot <- function(data, column, year) {
# Return top 10 countries plot
# Data : dataframe ;
# column : dataframe columns (only co2, co2_per_capita, cumulative_co2)
# filter top 10 countries according to arguments
top_countries <- data %>%
filter(Year==year) %>%
filter(country %in% intersect_country) %>%
select(country, {{column}}) %>%
arrange(desc({{column}}))
print(top_countries)
top10_countries <- head(top_countries, 10)
top10_countries$country <- factor(top10_countries$country,
levels = unique(top10_countries$country)[order(top10_countries[[2]],
decreasing = TRUE)])
# initial plotly plot
fig <- plot_ly(
x = top10_countries$country,
y = top10_countries[[2]],
type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
texttemplate = '%{y:.2s}', textposition = 'outside'
)
# For y-axis title based on selected column
choose_title <- function() {
title_col <- colnames(top10_countries[2])
if (title_col == "co2") {
return('CO<sub>2</sub> Emission (mil tonnes/year)')
} else if (title_col == "co2_per_capita") {
return('CO<sub>2</sub> Emission per capita (tonnes/year)')
} else if (title_col == "cumulative_co2") {
return('Cumulative CO<sub>2</sub> Emission (mil tonnes/year)')
}
}
fig <- fig %>% layout(title = sprintf('<b>Top 10 Countries in Year %s </b>', year),
yaxis = list(title = choose_title(),
titlefont = list(
size = 12)))
return(fig)
}
top_ranking_plot(data=co2, column="co2", year=2019)
top_ranking_plot <- function(data, column, year) {
# Return top 10 countries plot
# Data : dataframe ;
# column : dataframe columns (only co2, co2_per_capita, cumulative_co2)
# filter top 10 countries according to arguments
top_countries <- data %>%
filter(Year==year) %>%
filter(country %in% intersect_country) %>%
select(country, {{column}})
top_countries <-  top_countries %>% arrange(desc({{column}}))
print(top_countries)
top10_countries <- head(top_countries, 10)
top10_countries$country <- factor(top10_countries$country,
levels = unique(top10_countries$country)[order(top10_countries[[2]],
decreasing = TRUE)])
# initial plotly plot
fig <- plot_ly(
x = top10_countries$country,
y = top10_countries[[2]],
type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
texttemplate = '%{y:.2s}', textposition = 'outside'
)
# For y-axis title based on selected column
choose_title <- function() {
title_col <- colnames(top10_countries[2])
if (title_col == "co2") {
return('CO<sub>2</sub> Emission (mil tonnes/year)')
} else if (title_col == "co2_per_capita") {
return('CO<sub>2</sub> Emission per capita (tonnes/year)')
} else if (title_col == "cumulative_co2") {
return('Cumulative CO<sub>2</sub> Emission (mil tonnes/year)')
}
}
fig <- fig %>% layout(title = sprintf('<b>Top 10 Countries in Year %s </b>', year),
yaxis = list(title = choose_title(),
titlefont = list(
size = 12)))
return(fig)
}
top_ranking_plot(data=co2, column="co2", year=2019)
top_ranking_plot <- function(data, column, year) {
# Return top 10 countries plot
# Data : dataframe ;
# column : dataframe columns (only co2, co2_per_capita, cumulative_co2)
# filter top 10 countries according to arguments
top_countries <- data %>%
filter(Year==year) %>%
filter(country %in% intersect_country) %>%
select(country, {{column}})
top_countries <-  top_countries %>% arrange(desc(co2))
print(top_countries)
top10_countries <- head(top_countries, 10)
top10_countries$country <- factor(top10_countries$country,
levels = unique(top10_countries$country)[order(top10_countries[[2]],
decreasing = TRUE)])
# initial plotly plot
fig <- plot_ly(
x = top10_countries$country,
y = top10_countries[[2]],
type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
texttemplate = '%{y:.2s}', textposition = 'outside'
)
# For y-axis title based on selected column
choose_title <- function() {
title_col <- colnames(top10_countries[2])
if (title_col == "co2") {
return('CO<sub>2</sub> Emission (mil tonnes/year)')
} else if (title_col == "co2_per_capita") {
return('CO<sub>2</sub> Emission per capita (tonnes/year)')
} else if (title_col == "cumulative_co2") {
return('Cumulative CO<sub>2</sub> Emission (mil tonnes/year)')
}
}
fig <- fig %>% layout(title = sprintf('<b>Top 10 Countries in Year %s </b>', year),
yaxis = list(title = choose_title(),
titlefont = list(
size = 12)))
return(fig)
}
top_ranking_plot(data=co2, column="co2", year=2019)
top_ranking_plot <- function(data, column, year) {
# Return top 10 countries plot
# Data : dataframe ;
# column : dataframe columns (only co2, co2_per_capita, cumulative_co2)
# filter top 10 countries according to arguments
top_countries <- data %>%
filter(Year==year) %>%
filter(country %in% intersect_country) %>%
select(country, {{column}})
top_countries <-  top_countries %>% arrange(desc({{column}}))
print(top_countries)
top10_countries <- head(top_countries, 10)
top10_countries$country <- factor(top10_countries$country,
levels = unique(top10_countries$country)[order(top10_countries[[2]],
decreasing = TRUE)])
# initial plotly plot
fig <- plot_ly(
x = top10_countries$country,
y = top10_countries[[2]],
type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
texttemplate = '%{y:.2s}', textposition = 'outside'
)
# For y-axis title based on selected column
choose_title <- function() {
title_col <- colnames(top10_countries[2])
if (title_col == "co2") {
return('CO<sub>2</sub> Emission (mil tonnes/year)')
} else if (title_col == "co2_per_capita") {
return('CO<sub>2</sub> Emission per capita (tonnes/year)')
} else if (title_col == "cumulative_co2") {
return('Cumulative CO<sub>2</sub> Emission (mil tonnes/year)')
}
}
fig <- fig %>% layout(title = sprintf('<b>Top 10 Countries in Year %s </b>', year),
yaxis = list(title = choose_title(),
titlefont = list(
size = 12)))
return(fig)
}
top_ranking_plot(data=co2, column="co2", year=2019)
top_countries <-  top_countries %>% arrange(desc({{`column`}}))
top_ranking_plot <- function(data, column, year) {
# Return top 10 countries plot
# Data : dataframe ;
# column : dataframe columns (only co2, co2_per_capita, cumulative_co2)
# filter top 10 countries according to arguments
top_countries <- data %>%
filter(Year==year) %>%
filter(country %in% intersect_country) %>%
select(country, {{column}})
top_countries <-  top_countries %>% arrange(desc({{`column`}}))
print(top_countries)
top10_countries <- head(top_countries, 10)
top10_countries$country <- factor(top10_countries$country,
levels = unique(top10_countries$country)[order(top10_countries[[2]],
decreasing = TRUE)])
# initial plotly plot
fig <- plot_ly(
x = top10_countries$country,
y = top10_countries[[2]],
type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
texttemplate = '%{y:.2s}', textposition = 'outside'
)
# For y-axis title based on selected column
choose_title <- function() {
title_col <- colnames(top10_countries[2])
if (title_col == "co2") {
return('CO<sub>2</sub> Emission (mil tonnes/year)')
} else if (title_col == "co2_per_capita") {
return('CO<sub>2</sub> Emission per capita (tonnes/year)')
} else if (title_col == "cumulative_co2") {
return('Cumulative CO<sub>2</sub> Emission (mil tonnes/year)')
}
}
fig <- fig %>% layout(title = sprintf('<b>Top 10 Countries in Year %s </b>', year),
yaxis = list(title = choose_title(),
titlefont = list(
size = 12)))
return(fig)
}
top_ranking_plot(data=co2, column="co2", year=2019)
top_ranking_plot <- function(data, column, year) {
# Return top 10 countries plot
# Data : dataframe ;
# column : dataframe columns (only co2, co2_per_capita, cumulative_co2)
# filter top 10 countries according to arguments
top_countries <- data %>%
filter(Year==year) %>%
filter(country %in% intersect_country) %>%
select(country, {{column}})
top_countries <-  top_countries %>% arrange(colnames(top_countries[2]))
print(top_countries)
top10_countries <- head(top_countries, 10)
top10_countries$country <- factor(top10_countries$country,
levels = unique(top10_countries$country)[order(top10_countries[[2]],
decreasing = TRUE)])
# initial plotly plot
fig <- plot_ly(
x = top10_countries$country,
y = top10_countries[[2]],
type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
texttemplate = '%{y:.2s}', textposition = 'outside'
)
# For y-axis title based on selected column
choose_title <- function() {
title_col <- colnames(top10_countries[2])
if (title_col == "co2") {
return('CO<sub>2</sub> Emission (mil tonnes/year)')
} else if (title_col == "co2_per_capita") {
return('CO<sub>2</sub> Emission per capita (tonnes/year)')
} else if (title_col == "cumulative_co2") {
return('Cumulative CO<sub>2</sub> Emission (mil tonnes/year)')
}
}
fig <- fig %>% layout(title = sprintf('<b>Top 10 Countries in Year %s </b>', year),
yaxis = list(title = choose_title(),
titlefont = list(
size = 12)))
return(fig)
}
top_ranking_plot(data=co2, column="co2", year=2019)
top_countries
colnames(top_countries)[2]
top_countries[order(colnames(top_countries)[2])]
top_countries[order(colnames(top_countries)[2]), ]
top_countries[, order(colnames(top_countries)[2])]
top_countries[, order(colnames(top_countries)[2])]
top_countries[order(colnames(top_countries)[2]), ]
top_countries[order(top_countries[2]), ]
top_countries[order(-top_countries[2]), ]
top_ranking_plot <- function(data, column, year) {
# Return top 10 countries plot
# Data : dataframe ;
# column : dataframe columns (only co2, co2_per_capita, cumulative_co2)
# filter top 10 countries according to arguments
top_countries <- data %>%
filter(Year==year) %>%
filter(country %in% intersect_country) %>%
select(country, {{column}})
top_countries <-  top_countries[order(-top_countries[2]), ]
print(top_countries)
top10_countries <- head(top_countries, 10)
top10_countries$country <- factor(top10_countries$country,
levels = unique(top10_countries$country)[order(top10_countries[[2]],
decreasing = TRUE)])
# initial plotly plot
fig <- plot_ly(
x = top10_countries$country,
y = top10_countries[[2]],
type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
texttemplate = '%{y:.2s}', textposition = 'outside'
)
# For y-axis title based on selected column
choose_title <- function() {
title_col <- colnames(top10_countries[2])
if (title_col == "co2") {
return('CO<sub>2</sub> Emission (mil tonnes/year)')
} else if (title_col == "co2_per_capita") {
return('CO<sub>2</sub> Emission per capita (tonnes/year)')
} else if (title_col == "cumulative_co2") {
return('Cumulative CO<sub>2</sub> Emission (mil tonnes/year)')
}
}
fig <- fig %>% layout(title = sprintf('<b>Top 10 Countries in Year %s </b>', year),
yaxis = list(title = choose_title(),
titlefont = list(
size = 12)))
return(fig)
}
top_ranking_plot(data=co2, column="co2", year=2019)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
co2
colnams(co2)
colnames(co2)
runApp()
runApp()
runApp()
co2$consumption_co2
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
intersect_country
unique(co2$country)
unique(co2$country)
countries
co2_map
co2_map
co2_large_countries
worldcountry[worldcountry$ADM0_A3 %in% co2_large_countries$alpha3, ]
co2_map
colnames(co2_map)
colnames(co2_map)$
co2_map$country
colnames(co2_map)$
co2_map$country
colnames(co2_map)$
class(co2_map)
class(co2_map)
co2_map$country
unique(co2_map$country)
top_ranking_plot <- function(data, column, year) {
# Return top 10 countries plot
# Data : dataframe ;
# column : dataframe columns (only co2, co2_per_capita, cumulative_co2)
# filter top 10 countries according to arguments
top_countries <- data %>%
filter(Year==year) %>%
filter(country %in% unique(co2_map$country)) %>%
select(country, {{column}})
top_countries <-  top_countries[order(-top_countries[2]), ]
print(top_countries)
top10_countries <- head(top_countries, 10)
top10_countries$country <- factor(top10_countries$country,
levels = unique(top10_countries$country)[order(top10_countries[[2]],
decreasing = TRUE)])
# initial plotly plot
fig <- plot_ly(
x = top10_countries$country,
y = top10_countries[[2]],
type = "bar",
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5)),
texttemplate = '%{y:.2s}', textposition = 'outside'
)
# For y-axis title based on selected column
choose_title <- function() {
title_col <- colnames(top10_countries[2])
if (title_col == "co2") {
return('CO<sub>2</sub> Emission (mil tonnes/year)')
} else if (title_col == "co2_per_capita") {
return('CO<sub>2</sub> Emission per capita (tonnes/year)')
} else if (title_col == "cumulative_co2") {
return('Cumulative CO<sub>2</sub> Emission (mil tonnes/year)')
}
}
fig <- fig %>% layout(title = sprintf('<b>Top 10 Countries in Year %s </b>', year),
yaxis = list(title = choose_title(),
titlefont = list(
size = 12)))
return(fig)
}
top_ranking_plot(data=co2, column="co2", year=2019)
runApp()
runApp()
runApp()
runApp()
runApp()
unique(co2_map$year)
unique(co2_map$Year)
min(unique(co2_map$Year))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Codebook
codebook <- read.csv("input_data/codebook.csv")
codebook
head(codebook)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
